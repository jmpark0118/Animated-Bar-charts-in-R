library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
temp <- head(fifa$Height)
temp
temp[1]
split(temp[1])
split(temp[1], "'")
split(temp[1], sep="'")
separate(temp, sep = "'")
separate(temp, into = c(feet, inch) sep = "'")
separate(temp, into = c(feet, inch), sep = "'")
separate(fifa, col = Height, into = c(feet, inch), sep = "'")
separate(fifa, col = Height, into = c('feet', 'inch'), sep = "'")
separate(fifa, col = Height, into = c('feet', 'inch'), sep = "'") %>% head()
separate(fifa, col = Height, into = c('feet', 'inch'), sep = "'") %>% mutate(Height_cm=feet*30+inch*2.5) %>% head()
separate(fifa, col = Height, into = c('feet', 'inch'), sep = "'") %>% mutate(Height_cm=feet*30+inch*2.5)
separate(fifa, col = Height, into = c('feet', 'inch'), sep = "'") %>% head()
temp <- separate(fifa, col = Height, into = c('feet', 'inch'), sep = "'") %>% head()
str(temp)
separate(fifa, col = Height, into = c('feet', 'inch'), sep = "'") %>% mutate(Height_cm=as.numeric(feet)*30+as.numeric(inch)*2.5) %>% head()
separate(fifa, col = Height, into = c('feet', 'inch'), sep = "'") %>% mutate(Height_cm=as.numeric(feet)*30+as.numeric(inch)*2.5) %>% head() %>% select(-feet, -inch)
fifa %>% mutate(Height2=Height) %>% separate(fifa, col = Height2, into = c('feet', 'inch'), sep = "'") %>% mutate(Height_cm=as.numeric(feet)*30+as.numeric(inch)*2.5) %>% head() %>% select(-feet, -inch)
fifa %>% mutate(Height2=Height) %>% head()
fifa %>% mutate(Height2=Height) %>% separate(fifa, col = Height2, into = c('feet', 'inch'), sep = "'") %>% mutate(Height_cm=as.numeric(feet)*30+as.numeric(inch)*2.5) %>% head() %>% select(-feet, -inch)
fifa %>% mutate(Height2=Height) %>% separate(fifa, col = Height2, into = c('feet', 'inch'), sep = "'") %>% mutate(Height_cm=as.numeric(feet)*30+as.numeric(inch)*2.5)  %>% select(-feet, -inch)
fifa %>% mutate(Height2=Height) %>% separate(fifa, col = Height2, into = c('feet', 'inch'), sep = "'") %>% mutate(Height_cm=as.numeric(feet)*30+as.numeric(inch)*2.5) %>% head()
fifa %>% mutate(Height2=Height) %>% separate(fifa, col = Height, into = c('feet', 'inch'), sep = "'") %>% mutate(Height_cm=as.numeric(feet)*30+as.numeric(inch)*2.5) %>% head()
fifa %>% mutate(Height2=Height) %>% separate(col = Height, into = c('feet', 'inch'), sep = "'") %>% mutate(Height_cm=as.numeric(feet)*30+as.numeric(inch)*2.5) %>% head()
fifa %>% mutate(Height2=Height) %>% separate(col = Height2, into = c('feet', 'inch'), sep = "'") %>% mutate(Height_cm=as.numeric(feet)*30+as.numeric(inch)*2.5) %>% head()
fifa <- fifa %>% mutate(Height2=Height) %>%
separate(col = Height2, into = c('feet', 'inch'), sep = "'") %>%
mutate(Height_cm=as.numeric(feet)*30+as.numeric(inch)*2.5) %>%
select(-feet, -inch)
head(fifa)
fifa[!complete.cases(fifa),]
fifa$Height<-as.character(fifa$Height)
head(fifa)
fifa <- read.csv('C:/Users/jeong/Desktop/ADP/모의고사 R코드 및 데이터/모의고사 1회/FIFA.csv')
head(fifa)
fifa$Height<-as.character(fifa$Height)
head(fifa)
as.numeric(substr(fifa$Height,1,regexpr("'", fifa$Height)-1)) * 30 +
+ as.numeric(substr(fifa$Height,regexpr("'", fifa$Height)+1, nchar(fifa$Height))) * 2.5
regexpr("'", fifa$Height)-1
regexpr("'", fifa$Height[1:6,])
regexpr("'", fifa[1:6,$Height)
regexpr("'", fifa[1:6,]$Height)
fifa$Height_cm <- as.numeric(substr(fifa$Height,1,regexpr("'", fifa$Height)-1)) * 30 + as.numeric(substr(fifa$Height,regexpr("'", fifa$Height)+1, nchar(fifa$Height))) * 2.5
head(fifa)
fifa <- read.csv('C:/Users/jeong/Desktop/ADP/모의고사 R코드 및 데이터/모의고사 1회/FIFA.csv')
dim(fifa)
fifa[!complete.cases(fifa),]
summary(fifa)
str(fifa)
head(fifa)
class(fifa$Position)
library(tidyverse)
library(tidyverse)
fifa$Position_Class <- as.factor(fifa$Position)
head(fifa)
table(fifa$Position_Class)
table(fifa$Position)
class(fifa$Position)
class(fifa$Position_Class)
fifa <- read.csv('C:/Users/jeong/Desktop/ADP/모의고사 R코드 및 데이터/모의고사 1회/FIFA.csv')
Forward <- c(LS, ST, RS, LW, LF, CF, RF, RW)
Forward <- c('LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW')
Midfielder <- c('LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM')
Defender <- c('LWB', 'LDM', 'CDM', 'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB')
GoalKeeper <- c('GK')
fifa <- fifa %>%
mutate(Position_Class=as.factor(ifelse(Position %in% Forward, "Forward",
ifelse(Position %in% Midfielder, "Midfielder",
ifelse(Position %in% Defender, "Defender",
"GoalKeeper")))))
head(fifa)
anova(fifa$Position_Class ~ fifa$Value)
anova(lm(fifa$Position_Class ~ fifa$Value))
aov(Position_Class ~ Value, data = fifa)
aov(Value ~ Position_Class, data = fifa)
fifa_aov <- subset(fifa, c(Value, Position))
fifa_aov <- subset(fifa, select = c(Value, Position))
head(fifa_aov)
fifa_group <- fifa_aov %>% group_by(Position) %>% summarise(mean(Value))
fifa_group
fifa_group <- fifa_aov %>% group_by(Position) %>% summarise(avg=mean(Value))
fifa_group
aov(avg ~ Position_Class, data = fifa)
aov(avg ~ Position_Class, data = fifa_group)
fifa_aov <- subset(fifa, select = c(Value, Position_Class))
fifa_group <- fifa_aov %>% group_by(Position_Class) %>% summarise(avg=mean(Value))
fifa_group
aov(avg ~ Position_Class, data = fifa_group)
fifa_group
fifa_anova <- ov(avg ~ Position_Class, data = fifa_group)
fifa_anova <- aov(avg ~ Position_Class, data = fifa_group)
summary(fifa_anova)
# fifa_sub <- subset(fifa, select = c(Value, Position_Class))
fifa_group <- fifa %>% group_by(Position_Class) %>% summarise(avg=mean(Value))
fifa_group
fifa_anova <- aov(avg ~ Position_Class, data = fifa_group)
fifa_anova
summary(fifa_anova)
# fifa_sub <- subset(fifa, select = c(Value, Position_Class))
# fifa_group <- fifa %>% group_by(Position_Class) %>% summarise(avg=mean(Value))
# fifa_group
fifa_anova <- aov(avg ~ Position_Class, data = fifa)
# fifa_sub <- subset(fifa, select = c(Value, Position_Class))
# fifa_group <- fifa %>% group_by(Position_Class) %>% summarise(avg=mean(Value))
# fifa_group
fifa_anova <- aov(Value ~ Position_Class, data = fifa)
fifa_anova
summary(fifa_anova)
TukeyHSD(aov(Value ~ Position_Class, data = fifa))
fifa_result<-aov(Value~Position_Class, data=fifa) #분산분석 결과를 result 변수에 저장
summary(fifa_result)                              #분산분석표 확인
TukeyHSD(aov(Value~Position_Class, data=fifa))
colnames(fifa)
fifa_anova2 <- aov(Value ~ Position_Class*Preferred_Foot, data = fifa)
fifa_anova2
summary(fifa_anova2)
fifa_twoway_anova <- aov(Value ~ Preferred_Foot + Position_Class +
Preferred_Foot:Position_Class, data=fifa)
summary(fifa_twoway_anova)
lm1 <- lm(Value ~ Age + Overall + Wage + Height_cm + Weight_lb, data = fifa)
fifa <- fifa %>% mutate(Height2=Height) %>%
separate(col = Height2, into = c('feet', 'inch'), sep = "'") %>%
mutate(Height_cm=as.numeric(feet)*30+as.numeric(inch)*2.5) %>%
select(-feet, -inch)
lm1 <- lm(Value ~ Age + Overall + Wage + Height_cm + Weight_lb, data = fifa)
summary(lm1)
lm1
lm1.step <- step(lm1, direction = 'both')
lm1.step <- step(lm1, scope = list(upper=lm1, lower=Value~1), direction = 'both')
step(lm(Value~1, data=fifa), scope=list(lower=~1,
upper=~Age + Overall + Wage + Height_cm + Weight_lb), direction="both")
#변수선택을 통해 도출된 회귀모형
fifa.lm <- lm(Value ~ Wage + Overall + Age + Height_cm, data = fifa)
summary(fifa.lm)
fifa.step <- lm(Value ~ Wage + Overall + Age + Height_cm, data = fifa)
summary(fifa.step)
review <- read.table('C:/Users/jeong/Desktop/ADP/모의고사 R코드 및 데이터/모의고사 1회/영화 기생충_review.txt')
review <- readLines('C:/Users/jeong/Desktop/ADP/모의고사 R코드 및 데이터/모의고사 1회/영화 기생충_review.txt')
review
library(tm)
review.corpus <- VCorpus(VectorSource(review))
review.corpus[[1]]$content
clean.txt <- function(txt){
txt <- removeNumbers(txt)
txt <- removePunctuation(txt)
txt <- stripWhitespace(txt)
txt <- gsub('[^[:alnum:]]', ' ', txt)
}
review.clean <- clean.txt(review)
library(KoNLP)
useSejongDic()
extractNoun(review.clean)
review <- readLines('C:/Users/jeong/Desktop/ADP/모의고사 R코드 및 데이터/모의고사 1회/영화 기생충_review.txt')
library(tm)
clean.txt <- function(txt){
txt <- removeNumbers(txt)
txt <- removePunctuation(txt)
txt <- stripWhitespace(txt)
txt <- gsub('[^[:alnum:]]', ' ', txt)
}
review.clean <- clean.txt(review)
library(KoNLP)
library(KoNLP)
useSejongDic()
readLines('C:/Users/jeong/Desktop/ADP/모의고사 R코드 및 데이터/모의고사 1회/영화 기생충_사전.txt')
data.frame(readLines('C:/Users/jeong/Desktop/ADP/모의고사 R코드 및 데이터/모의고사 1회/영화 기생충_사전.txt'))
data.frame(c(readLines('C:/Users/jeong/Desktop/ADP/모의고사 R코드 및 데이터/모의고사 1회/영화 기생충_사전.txt')))
data.frame(readLines('C:/Users/jeong/Desktop/ADP/모의고사 R코드 및 데이터/모의고사 1회/영화 기생충_사전.txt'), 'ncn')
buildDictionary(ext_dic = 'sejong',
user_dic = data.frame(readLines('C:/Users/jeong/Desktop/ADP/모의고사 R코드 및 데이터/모의고사 1회/영화 기생충_사전.txt'), 'ncn'))
library(KoNLP)
useSejongDic()
useSejongDic()
buildDictionary(ext_dic = 'sejong',
user_dic = data.frame(readLines('C:/Users/jeong/Desktop/ADP/모의고사 R코드 및 데이터/모의고사 1회/영화 기생충_사전.txt'), 'ncn'),
replace_usr_dic = T)
clean.txt <- function(txt){
txt <- removeNumbers(txt)
txt <- removePunctuation(txt)
txt <- stripWhitespace(txt)
txt <- tolower(txt)
}
review.clean <- clean.txt(review)
review.clean[1:10]
movie <- review
buildDictionary(ext_dic = "woorimalsam", user_dic=data.frame(readLines("C:/Users/jeong/Desktop/ADP/모의고사 R코드 및 데이터/모의고사 1회/영화 기생충_사전.txt"),"ncn"),replace_usr_dic = T)
movie[1:10]
clean_txt<-function(txt){
txt<-tolower(txt)             # 대, 소문자 변환
txt<-removePunctuation(txt)   # 구두점 제거
txt<-removeNumbers(txt)       # 숫자 제거
txt<-stripWhitespace(txt)     # 공백제거
return(txt)
}
movie_clean<-clean_txt(movie)
movie_clean[1:10]
VC.review <- VCorpus(VectorSource(review.clean))
TDM.review <- TermDocumentMatrix(VC.review)
dim(TDM.review)
inspect(TDM.review[1:5,])
TDM.review <- TermDocumentMatrix(VC.review,
control = list(tokenize=words, dictionary=dic))
dic <- readLines('C:/Users/jeong/Desktop/ADP/모의고사 R코드 및 데이터/모의고사 1회/영화 기생충_사전.txt')
VC.review <- VCorpus(VectorSource(review.clean))
TDM.review <- TermDocumentMatrix(VC.review,
control = list(tokenize=words, dictionary=dic))
dim(TDM.review)
inspect(TDM.review)
b<-VCorpus(VectorSource(movie))
clean_corpus <- function(corpus){
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, content_transformer(tolower))
return(corpus)
}
c<-clean_corpus(b)
dtm<-TermDocumentMatrix(c,control=list(dictionary=dic))
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 12)
inspect(dtm)
m
v
# dim(TDM.review)
# inspect(TDM.review)
tdm <- as.matrix(TDM.review)
term.freq <- sort(rowSums(tdm), decreasing = T)
term.freq
names(term.freq)
names(tdm)
tdm
tdm$freq
term.freq$freq
term.freq
d <- data.frame(word=names(term.freq), freq=term.freq)
d
d <- data.frame(word=names(term.freq), freq=term.freq, row.names = F)
d <- data.frame(word=names(term.freq), freq=term.freq, row.names = NULL)
d
b<-VCorpus(VectorSource(movie))
clean_corpus <- function(corpus){
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, content_transformer(tolower))
return(corpus)
}
c<-clean_corpus(b)
dtm<-TermDocumentMatrix(c,control=list(dictionary=dic))
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 12)
d
library(wordcloud)
wordcloud(words = d$word,
freq = d$freq,
min.freq = 1,
random.order = F,
colors = brewer.pal(8, 'Spectral'))
colors<-rainbow(nrow(d))
barplot(v[1:10], main="기생충 review 빈출 명사",col=colors)
legend("right",names(v[1:10]),fill=colors)
library(ggplot2)
d
ggplot(d, aes(word, freq)) + geom_bar(stat = 'identity')
ggplot(d, aes(reorder(word, -freq), freq)) + geom_bar(stat = 'identity')
ggplot(d, aes(reorder(word, -freq), freq)) +
theme_bw() +
geom_bar(stat = 'identity', aes(fill=word))
ggplot(d, aes(reorder(word, -freq), freq)) +
theme_bw() +
geom_bar(stat = 'identity')
colors<-rainbow(nrow(d))
colors
barplot(v[1:10], main="기생충 review 빈출 명사",col=colors)
legend("right",names(v[1:10]),fill=colors)
barplot(v[1:10], main="기생충 review 빈출 명사",col=colors)
legend("right",names(v[1:10]),fill=colors)
ggplot(d[d$freq>0,], aes(reorder(word, -freq), freq)) +
theme_bw() +
geom_bar(stat = 'identity')
ggplot(d[d$freq>0,], aes(reorder(word, -freq), freq)) +
theme_bw() +
geom_bar(stat = 'identity', aes(fill=rainbow(nrow(d[d$freq>0,]))))
ggplot(d[d$freq>0,], aes(reorder(word, -freq), freq)) +
theme_bw() +
geom_bar(stat = 'identity', aes(fill=word))
barplot(v[1:10], main="기생충 review 빈출 명사",col=colors)
legend("right",names(v[1:10]),fill=colors)
ggplot(d[d$freq>0,], aes(reorder(word, -freq), freq)) +
theme_bw() +
geom_bar(stat = 'identity', aes(fill=word)) +
theme(title = '기생충 review 빈출 명사',
labs = NULL)
ggplot(d[d$freq>0,], aes(reorder(word, -freq), freq)) +
theme_bw() +
geom_bar(stat = 'identity', aes(fill=word)) +
labs(title = '기생충 review 빈출 명사')
ggplot(d[d$freq>0,], aes(reorder(word, -freq), freq)) +
theme_bw() +
geom_bar(stat = 'identity', aes(fill=word)) +
labs(title = '기생충 review 빈출 명사',
x = NULL, y = NULL)
barplot(v[1:10], main="기생충 review 빈출 명사",col=colors)
legend("right",names(v[1:10]),fill=colors)
ggplot(d[d$freq>0,], aes(reorder(word, -freq), freq)) +
theme_bw() +
geom_bar(stat = 'identity', aes(fill=word)) +
labs(title = '기생충 review 빈출 명사',
x = NULL, y = NULL, fill = NULL)
ggplot(d[d$freq>0,], aes(reorder(word, -freq), freq)) +
theme_bw() +
geom_bar(stat = 'identity', aes(fill=word)) +
labs(title = '기생충 review 빈출 명사',
x = NULL, y = NULL, fill = NULL)
install.packages('ridge')
library(ridge)
data(longley)
head(longley)
summary(longley)
dim(longley)
longley <- na.omit(longley)
dim(longley)
names(longley)[1] <- 'y'
head(longley)
mod <- linearRidge(y~.-1, data = longley, lambda = 'automatic')
mod
summary(mod)
mod2 <- linearRidge(y~., data = longley, lambda = 'automatic')
mod2
summary(mod2)
options(scipen = 999)
summary(mod)
install.packages('genridge')
library(genridge)
lambda <- c(0, 0.005, 0.01, 0.02, 0.04, 0.08)
r <- ridge(y~., data = longley, lambda = lambdda)
r <- ridge(y~., data = longley, lambda = lambda)
traceplot(r)
r <- ridge(y~.-1, data = longley, lambda = lambda)
traceplot(r)
fit1 <- prcomp(USArrests, scale=TRUE)
summary(fit1)
fit1
print(fit1)
loadings(fit1)
loadings()
fit1
fit1$loadings
fit1$rotation
fit1$center
fit1$scale
library(tidyverse)
library(janitor)
setwd('C:/Users/jeong/Documents/GITHUB/Animated-Bar-charts-in-R')
covid_tidy <- read_csv("data/covid.csv")
## select required columns
colnames(covid_tidy)
colnames(covid_tidy)[3] <- 'value'
colnames(covid_tidy)[2] <- 'country_name'
library(tidyverse)
library(gganimate)
## 상위 15개의 국가만 보이게 함
covid_formatted <- covid_tidy %>%
mutate(weeknumber=as.numeric(strftime(Date, format = "%V")),
monthno=as.numeric(strftime(Date, format = "%m"))) %>%
group_by(monthno, weeknumber, country_name) %>%
select(-Date) %>%
summarise(value=sum(value)) %>%
# The * 1 makes it possible to have non-integer ranks while sliding
mutate(rank = rank(-value, ties.method = "random"),
Value_rel = value/value[rank==1],
Value_lbl = paste0(" ",round(value/1e3))) %>%
group_by(monthno, weeknumber, country_name) %>%
filter(rank <=10) %>%
arrange(monthno, weeknumber, rank) %>%
ungroup()
head(covid_formatted)
View(covid_formatted)
covid_formatted[covid_formatted$country_name=='US',]
View(covid_formatted[covid_formatted$country_name=='US',])
## 상위 15개의 국가만 보이게 함
covid_formatted <- covid_tidy %>%
mutate(weeknumber=as.numeric(strftime(Date, format = "%V")),
monthno=as.numeric(strftime(Date, format = "%m"))) %>%
group_by(weeknumber, country_name) %>%
select(-Date) %>%
summarise(value=sum(value)) %>%
# The * 1 makes it possible to have non-integer ranks while sliding
mutate(rank = rank(-value, ties.method = "random"),
Value_rel = value/value[rank==1],
Value_lbl = paste0(" ",round(value/1e3))) %>%
group_by(monthno, weeknumber, country_name) %>%
filter(rank <=10) %>%
arrange(monthno, weeknumber, rank) %>%
ungroup()
## 상위 15개의 국가만 보이게 함
covid_formatted <- covid_tidy %>%
mutate(weeknumber=as.numeric(strftime(Date, format = "%V")),
monthno=as.numeric(strftime(Date, format = "%m"))) %>%
group_by(weeknumber, country_name) %>%
select(-Date) %>%
summarise(value=sum(value)) %>%
# The * 1 makes it possible to have non-integer ranks while sliding
mutate(rank = rank(-value, ties.method = "random"),
Value_rel = value/value[rank==1],
Value_lbl = paste0(" ",round(value/1e3))) %>%
group_by(weeknumber, country_name) %>%
filter(rank <=10) %>%
arrange(weeknumber, rank) %>%
ungroup()
View(covid_formatted[covid_formatted$country_name=='US',])
covid_formatted <- covid_formatted[covid_formatted$weeknumber>=10 && covid_formatted$weeknumber<=45]
head(covid_formatted)
## 상위 15개의 국가만 보이게 함
covid_formatted <- covid_tidy %>%
mutate(weeknumber=as.numeric(strftime(Date, format = "%V")),
monthno=as.numeric(strftime(Date, format = "%m"))) %>%
group_by(weeknumber, country_name) %>%
select(-Date) %>%
summarise(value=sum(value)) %>%
# The * 1 makes it possible to have non-integer ranks while sliding
mutate(rank = rank(-value, ties.method = "random"),
Value_rel = value/value[rank==1],
Value_lbl = paste0(" ",round(value/1e3))) %>%
group_by(weeknumber, country_name) %>%
filter(rank <=10) %>%
arrange(weeknumber, rank) %>%
ungroup()
covid_formatted[covid_formatted$weeknumber>=10 && covid_formatted$weeknumber<=45]
covid_formatted <- covid_formatted[10<=covid_formatted$weeknumber<=45,]
covid_formatted[covid_formatted$weeknumber>=10 && covid_formatted$weeknumber<=45,]
covid_formatted[covid_formatted$weeknumber>=10,]
covid_formatted[covid_formatted$weeknumber<=45,]
covid_formatted %>% filter(weeknumber>=10, weeknumber<=45)
## 상위 15개의 국가만 보이게 함
covid_formatted <- covid_tidy %>%
mutate(weeknumber=as.numeric(strftime(Date, format = "%V")),
monthno=as.numeric(strftime(Date, format = "%m"))) %>%
group_by(weeknumber, country_name) %>%
select(-Date) %>%
summarise(value=sum(value)) %>%
# The * 1 makes it possible to have non-integer ranks while sliding
mutate(rank = rank(-value, ties.method = "random"),
Value_rel = value/value[rank==1],
Value_lbl = paste0(" ",round(value/1e3))) %>%
group_by(weeknumber, country_name) %>%
filter(rank <=10) %>%
arrange(weeknumber, rank) %>%
ungroup()
covid_formatted <- covid_formatted %>%
filter(weeknumber>=10, weeknumber<=45)
head(covid_formatted)
View(covid_formatted)
staticplot = ggplot(covid_formatted,
aes(rank, group = country_name,
fill = as.factor(country_name),
color = as.factor(country_name))) +
geom_tile(aes(y = value/2,
height = value,
width = 0.9), alpha = 0.8, color = NA) +
geom_text(aes(y = 0, label = paste(country_name, " ")), vjust = 0.2, hjust = 1, size = 8) +
geom_text(aes(y=value, label = Value_lbl), hjust=0, size = 8) +
coord_flip(clip = "off", expand = FALSE) +
scale_y_continuous(labels = scales::comma) +
scale_x_reverse() +
guides(color = FALSE, fill = FALSE) +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major.x = element_line( size=.1, color="grey30" ),
panel.grid.minor.x = element_line( size=.1, color="grey30" ),
plot.title=element_text(size=25, hjust=0.5, face="bold", color="grey10", vjust=-1),
plot.subtitle=element_text(size=18, hjust=0.5, face="italic", color="grey30"),
plot.caption =element_text(size=10, hjust=0.5, face="italic", color="grey30"),
plot.background=element_blank(),
plot.margin = margin(2, 4, 2, 8, "cm"))
anim = staticplot +
transition_states(weeknumber, transition_length = 4, state_length = 1) +
view_follow(fixed_x = TRUE)  +
labs(title = 'Confirmed numbers of Covid 19 per Week : {closest_state}',
subtitle  =  "Top 10 Countries",
caption  = "Confirmed numbers of Covid19 | Data Source: World Bank Data")
# For GIF
animate(anim, nframes = 1000, fps = 10,  width = 1200, height = 900,
end_pause = 10,
renderer = gifski_renderer("gganim_covid.gif"))
# For GIF
animate(anim, nframes = 800, fps = 20,  width = 1200, height = 900,
end_pause = 5,
renderer = gifski_renderer("gganim_covid.gif"))
# For GIF
animate(anim, nframes = 800, fps = 20,  width = 1200, height = 900,
end_pause = 5,
renderer = gifski_renderer("gganim_covid19.gif"))
